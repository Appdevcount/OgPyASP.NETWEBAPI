//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace PayitDealerGlobalPayit.DAL
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class PayitGlobalDealersDBEntities : DbContext
    {
        public PayitGlobalDealersDBEntities()
            : base("name=PayitGlobalDealersDBEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Agent> Agents { get; set; }
        public virtual DbSet<AgentServiceCommision> AgentServiceCommisions { get; set; }
        public virtual DbSet<App> Apps { get; set; }
        public virtual DbSet<AppUserDevice> AppUserDevices { get; set; }
        public virtual DbSet<BackendLogger> BackendLoggers { get; set; }
        public virtual DbSet<City> Cities { get; set; }
        public virtual DbSet<ComplaintHistory> ComplaintHistories { get; set; }
        public virtual DbSet<Complaint> Complaints { get; set; }
        public virtual DbSet<ComplaintType> ComplaintTypes { get; set; }
        public virtual DbSet<country> countries { get; set; }
        public virtual DbSet<CountryCurrency> CountryCurrencies { get; set; }
        public virtual DbSet<Currency> Currencies { get; set; }
        public virtual DbSet<DealerCategory> DealerCategories { get; set; }
        public virtual DbSet<DealerCategoryUpdate> DealerCategoryUpdates { get; set; }
        public virtual DbSet<DealerDevice> DealerDevices { get; set; }
        public virtual DbSet<Dealer> Dealers { get; set; }
        public virtual DbSet<DealerServiceCommision> DealerServiceCommisions { get; set; }
        public virtual DbSet<DealerTransaction> DealerTransactions { get; set; }
        public virtual DbSet<Denomination> Denominations { get; set; }
        public virtual DbSet<Device> Devices { get; set; }
        public virtual DbSet<DServiceCommision> DServiceCommisions { get; set; }
        public virtual DbSet<FrontendLogger> FrontendLoggers { get; set; }
        public virtual DbSet<ISysWallet> ISysWallets { get; set; }
        public virtual DbSet<Location> Locations { get; set; }
        public virtual DbSet<Role> Roles { get; set; }
        public virtual DbSet<root_dealer_history> root_dealer_history { get; set; }
        public virtual DbSet<root_dealers> root_dealers { get; set; }
        public virtual DbSet<ServiceProvider> ServiceProviders { get; set; }
        public virtual DbSet<ServiceType> ServiceTypes { get; set; }
        public virtual DbSet<Servvice> Servvices { get; set; }
        public virtual DbSet<Session> Sessions { get; set; }
        public virtual DbSet<State> States { get; set; }
        public virtual DbSet<SupportTicket> SupportTickets { get; set; }
        public virtual DbSet<Tbl_Account_Balance> Tbl_Account_Balance { get; set; }
        public virtual DbSet<Tbl_Account_Balance_History> Tbl_Account_Balance_History { get; set; }
        public virtual DbSet<Tbl_Account_Devices> Tbl_Account_Devices { get; set; }
        public virtual DbSet<Tbl_Account_Users> Tbl_Account_Users { get; set; }
        public virtual DbSet<Tbl_Account_WalletBalance> Tbl_Account_WalletBalance { get; set; }
        public virtual DbSet<Tbl_Account_WalletBalance_History> Tbl_Account_WalletBalance_History { get; set; }
        public virtual DbSet<Tbl_Accounts> Tbl_Accounts { get; set; }
        public virtual DbSet<Tbl_Agent_Balance> Tbl_Agent_Balance { get; set; }
        public virtual DbSet<Tbl_Agent_Devices> Tbl_Agent_Devices { get; set; }
        public virtual DbSet<Tbl_Agent_WalletBalance> Tbl_Agent_WalletBalance { get; set; }
        public virtual DbSet<Tbl_Agent_WalletBalance_History> Tbl_Agent_WalletBalance_History { get; set; }
        public virtual DbSet<Tbl_Balance_History> Tbl_Balance_History { get; set; }
        public virtual DbSet<Tbl_Dealer_Balance> Tbl_Dealer_Balance { get; set; }
        public virtual DbSet<Tbl_Dealer_WalletBalance> Tbl_Dealer_WalletBalance { get; set; }
        public virtual DbSet<Tbl_Dealer_WalletBalance_History> Tbl_Dealer_WalletBalance_History { get; set; }
        public virtual DbSet<Tbl_Menu_Master> Tbl_Menu_Master { get; set; }
        public virtual DbSet<Tbl_Tab_Master> Tbl_Tab_Master { get; set; }
        public virtual DbSet<Tbl_User_Privileges> Tbl_User_Privileges { get; set; }
        public virtual DbSet<TicketStatu> TicketStatus { get; set; }
        public virtual DbSet<Transaction> Transactions { get; set; }
        public virtual DbSet<Transactions_Log> Transactions_Log { get; set; }
        public virtual DbSet<TransactionStatu> TransactionStatus { get; set; }
        public virtual DbSet<Update> Updates { get; set; }
        public virtual DbSet<UserRegistration> UserRegistrations { get; set; }
        public virtual DbSet<user> users { get; set; }
        public virtual DbSet<WalletItemType> WalletItemTypes { get; set; }
        public virtual DbSet<Zone> Zones { get; set; }
    
        public virtual ObjectResult<GetAccountBalanceHistory_Result> GetAccountBalanceHistory()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAccountBalanceHistory_Result>("GetAccountBalanceHistory");
        }
    
        public virtual ObjectResult<GetAccountBalances_Result> GetAccountBalances()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAccountBalances_Result>("GetAccountBalances");
        }
    
        public virtual ObjectResult<GetAgentBalanceHistory_Result> GetAgentBalanceHistory()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAgentBalanceHistory_Result>("GetAgentBalanceHistory");
        }
    
        public virtual ObjectResult<GetAgentBalanceHistoryTest_Result> GetAgentBalanceHistoryTest()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAgentBalanceHistoryTest_Result>("GetAgentBalanceHistoryTest");
        }
    
        public virtual ObjectResult<GetAgentBalances_Result> GetAgentBalances()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAgentBalances_Result>("GetAgentBalances");
        }
    
        public virtual ObjectResult<GetBalance_Result> GetBalance(Nullable<int> accountID, Nullable<int> serviceID, Nullable<double> balance)
        {
            var accountIDParameter = accountID.HasValue ?
                new ObjectParameter("AccountID", accountID) :
                new ObjectParameter("AccountID", typeof(int));
    
            var serviceIDParameter = serviceID.HasValue ?
                new ObjectParameter("ServiceID", serviceID) :
                new ObjectParameter("ServiceID", typeof(int));
    
            var balanceParameter = balance.HasValue ?
                new ObjectParameter("Balance", balance) :
                new ObjectParameter("Balance", typeof(double));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetBalance_Result>("GetBalance", accountIDParameter, serviceIDParameter, balanceParameter);
        }
    
        public virtual ObjectResult<GetBalanceNew_Result> GetBalanceNew(Nullable<int> accountID, Nullable<int> serviceID, Nullable<double> balance, string type)
        {
            var accountIDParameter = accountID.HasValue ?
                new ObjectParameter("AccountID", accountID) :
                new ObjectParameter("AccountID", typeof(int));
    
            var serviceIDParameter = serviceID.HasValue ?
                new ObjectParameter("ServiceID", serviceID) :
                new ObjectParameter("ServiceID", typeof(int));
    
            var balanceParameter = balance.HasValue ?
                new ObjectParameter("Balance", balance) :
                new ObjectParameter("Balance", typeof(double));
    
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetBalanceNew_Result>("GetBalanceNew", accountIDParameter, serviceIDParameter, balanceParameter, typeParameter);
        }
    
        public virtual ObjectResult<GetBalanceOriginal_Result> GetBalanceOriginal(Nullable<int> accountID, Nullable<int> serviceID, Nullable<double> balance)
        {
            var accountIDParameter = accountID.HasValue ?
                new ObjectParameter("AccountID", accountID) :
                new ObjectParameter("AccountID", typeof(int));
    
            var serviceIDParameter = serviceID.HasValue ?
                new ObjectParameter("ServiceID", serviceID) :
                new ObjectParameter("ServiceID", typeof(int));
    
            var balanceParameter = balance.HasValue ?
                new ObjectParameter("Balance", balance) :
                new ObjectParameter("Balance", typeof(double));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetBalanceOriginal_Result>("GetBalanceOriginal", accountIDParameter, serviceIDParameter, balanceParameter);
        }
    
        public virtual ObjectResult<GetBalanceUpdated_Result> GetBalanceUpdated(Nullable<int> accountID, Nullable<int> serviceID, Nullable<double> balance)
        {
            var accountIDParameter = accountID.HasValue ?
                new ObjectParameter("AccountID", accountID) :
                new ObjectParameter("AccountID", typeof(int));
    
            var serviceIDParameter = serviceID.HasValue ?
                new ObjectParameter("ServiceID", serviceID) :
                new ObjectParameter("ServiceID", typeof(int));
    
            var balanceParameter = balance.HasValue ?
                new ObjectParameter("Balance", balance) :
                new ObjectParameter("Balance", typeof(double));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetBalanceUpdated_Result>("GetBalanceUpdated", accountIDParameter, serviceIDParameter, balanceParameter);
        }
    
        public virtual ObjectResult<GetDealerBalanceHistory_Result> GetDealerBalanceHistory()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetDealerBalanceHistory_Result>("GetDealerBalanceHistory");
        }
    
        public virtual ObjectResult<GetDealerBalances_Result> GetDealerBalances()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetDealerBalances_Result>("GetDealerBalances");
        }
    }
}
